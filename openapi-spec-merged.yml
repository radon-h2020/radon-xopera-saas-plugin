components:
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad request.
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not found.
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized.
  schemas:
    Credential:
      description: A credential.
      properties:
        contents:
          description: Base64-encoded contents.
          format: byte
          type: string
        id:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        path:
          type: string
        workspaces:
          format: int64
          items:
            type: integer
          readOnly: true
          type: array
      required:
      - id
      - name
      - path
      - contents
      - workspaces
      type: object
    DeploymentInput:
      description: Inputs and service template name for deploy and validate commands.
      properties:
        inputs:
          type: object
        service_template:
          type: string
      required:
      - service_template
      type: object
    DeploymentOutput:
      description: Free-form mapping of outputs.
      type: object
    Empty:
      description: Nothing.
      maxItems: 0
      type: object
    EntityCreationStatus:
      description: The status of an entity creation request.
      properties:
        finished:
          type: boolean
        status:
          type: string
      required:
      - finished
      - status
      type: object
    EntityReference:
      description: A reference to another entity.
      properties:
        id:
          format: int64
          type: integer
      required:
      - id
      type: object
    Error:
      description: An error.
      properties:
        msg:
          type: string
      required:
      - msg
      type: object
    Invocation:
      description: An invocation of the deployment.
      properties:
        console_output:
          description: xOpera console output for operation.
          type: string
        exception:
          description: An internal xOpera error that occurred starting operation.
          type: string
        id:
          type: string
        inputs:
          description: Inputs provided for invocation.
          type: object
        instance_state:
          additionalProperties:
            type: string
          description: State of the instances defined in service template.
          type: object
        operation:
          type: OperationType
        state:
          $ref: '#/components/schemas/InvocationState'
        timestamp:
          description: An ISO8601 timestamp of the invocation.
          type: string
      required:
      - id
      - state
      - timestamp
      type: object
    InvocationHistory:
      description: Invocation history ordered by timestamp ascending.
      items:
        $ref: '#/components/schemas/Invocation'
      type: array
    InvocationState:
      enum:
      - pending
      - in_progress
      - success
      - failed
      type: string
    OperationType:
      enum:
      - deploy
      - undeploy
      type: string
    Project:
      description: A workspace.
      properties:
        csar:
          description: Base64-encoded ZIP file of the CSAR. The service template must
            be top-level.
          format: byte
          type: string
          writeOnly: true
        id:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        workspace:
          format: int64
          readOnly: true
          type: integer
      required:
      - id
      - name
      - workspace
      - csar
      type: object
    UserIdentifier:
      description: A unique identifier for a user.
      type: string
    ValidationResult:
      description: A CSAR validation result.
      properties:
        message:
          type: string
        success:
          type: boolean
      required:
      - success
      type: object
    Workspace:
      description: A workspace.
      properties:
        credentials:
          format: int64
          items:
            type: integer
          readOnly: true
          type: array
        id:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        projects:
          format: int64
          items:
            type: integer
          readOnly: true
          type: array
      required:
      - id
      - name
      - credentials
      - projects
      type: object
    WorkspaceUserAuthorizationRequest:
      description: A request for user de-authorization.
      properties:
        user:
          $ref: '#/components/schemas/UserIdentifier'
      required:
      - user
      type: object
info:
  license:
    name: Apache-2.0
  title: xOpera SaaS API
  version: 1.0.0
openapi: 3.0.0
paths:
  /credential:
    get:
      operationId: getCredentials
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Credential'
                type: array
          description: A list of credentials.
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: List available credentials.
    post:
      operationId: createCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
        description: Credential creation request.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: The created credential.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new credential.
  /credential/{credentialId}:
    delete:
      operationId: deleteCredential
      responses:
        '200':
          description: Credential deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a credential.
    get:
      operationId: describeCredential
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: A credential.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Describe a credential.
    parameters:
    - in: path
      name: credentialId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: updateCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
        description: Credential update request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: The updated credential.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update a credential.
  /workspace:
    get:
      operationId: getWorkspaces
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workspace'
                type: array
          description: A list of workspaces.
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: List available workspaces.
    post:
      operationId: createWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        description: Workspace creation request.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: The created Workspace.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new workspace.
  /workspace/{workspaceId}:
    delete:
      operationId: deleteWorkspace
      responses:
        '200':
          description: Workspace deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a workspace.
    get:
      operationId: describeWorkspace
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: A workspace.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Describe a workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: updateWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        description: Workspace update request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: The updated workspace.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update a workspace.
  /workspace/{workspaceId}/authorizations:
    delete:
      operationId: deauthorizeWorkspaceUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUserAuthorizationRequest'
        description: Deauthorization request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: Success.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Deauthorize a user from the workspace.
    get:
      operationId: getWorkspaceAuthorizations
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserIdentifier'
                type: array
          description: A list of users authorized to this workspace.
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: List users authorized to this workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: authorizeWorkspaceUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUserAuthorizationRequest'
        description: Authorization request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: Success.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Authorize a new user to the workspace.
  /workspace/{workspaceId}/credential:
    get:
      operationId: listWorkspaceCredentials
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Credential'
                type: array
          description: A list of credentials.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: List credentials assigned to the workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/credential/{credentialId}:
    delete:
      operationId: removeWorkspaceCredential
      responses:
        '200':
          description: Credential deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Remove the credential from the workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: credentialId
      required: true
      schema:
        format: int64
        type: integer
    put:
      operationId: assignCredential
      responses:
        '200':
          description: Credential assigned to workspace.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Assign a new credential to the workspace.
  /workspace/{workspaceId}/project:
    get:
      operationId: listWorkspaceProjects
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
          description: A list of projects.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: List projects in a workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    post:
      description: 'Credentials applied to the workspace the project is in are only
        applied on creation.

        To modify credentials, create a new project.

        '
      operationId: createWorkspaceProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: Project creation request.
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityReference'
          description: A reference to the created project.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Create a new project in the workspace (async).
  /workspace/{workspaceId}/project/{projectId}:
    delete:
      operationId: deleteWorkspaceProject
      responses:
        '200':
          description: Project deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete the project.
    get:
      operationId: describeWorkspaceProject
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: A project.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Describe the project.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: updateWorkspaceProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: Project update request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: The updated project.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update the project.
    x-extension-marker: true
  /workspace/{workspaceId}/project/{projectId}/creationStatus:
    get:
      operationId: describeWorkspaceProjectStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityCreationStatus'
          description: The project creation status.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Get the project creation status.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/deploy:
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: OperaApiDeploy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentInput'
        description: Deployment inputs and service template name.
        required: false
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invocation'
          description: The deployment was successfully initiated.
        '500':
          description: There was an error starting the deployment.
      summary: Deploy a CSAR
  /workspace/{workspaceId}/project/{projectId}/outputs:
    get:
      operationId: OperaApiOutputs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentOutput'
          description: The outputs of the deployment.
        '404':
          description: No outputs exist for this deployment.
      summary: Fetch deployment outputs
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/status:
    get:
      operationId: OperaApiStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvocationHistory'
          description: Asynchronous operation status history.
      summary: Fetch the status of a deployment
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/status/{invocationId}:
    get:
      operationId: OperaApiInvocationStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invocation'
          description: An invocation status.
        '404':
          description: No invocation with this id.
      summary: Fetch the status of a particular invocation.
    parameters:
    - in: path
      name: invocationId
      required: true
      schema:
        format: uuid
        type: string
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/undeploy:
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: OperaApiUndeploy
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invocation'
          description: The undeploy operation was successfully initiated.
        '500':
          description: There was an error starting the undeploy operation.
      summary: Undeploy a deployment
  /workspace/{workspaceId}/project/{projectId}/validate:
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: OperaApiValidate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentInput'
        description: Validation inputs and service template name.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
          description: The validation result.
        '500':
          description: There was an error starting validate operation.
      summary: Validate a CSAR
