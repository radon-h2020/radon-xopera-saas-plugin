components:
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad request.
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not found.
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized.
  schemas:
    AuthenticationStatus:
      description: Authentication status.
      properties:
        isLoggedIn:
          type: boolean
        userIdentifier:
          type: string
      required:
      - userIdentifier
      - isLoggedIn
      type: object
    CsarInitializationInput:
      description: Inputs and service template name for deploy and validate commands.
      properties:
        clean:
          type: boolean
        inputs:
          type: object
      required:
      - clean
      type: object
    DeploymentInput:
      description: Inputs and service template name for deploy and validate commands.
      properties:
        inputs:
          type: object
        service_template:
          type: string
      required:
      - service_template
      type: object
    DeploymentOutput:
      description: Free-form mapping of outputs.
      type: object
    Empty:
      description: Nothing.
      maxItems: 0
      type: object
    EntityCreationStatus:
      description: The status of an entity creation request.
      properties:
        finished:
          type: boolean
        status:
          type: string
      required:
      - finished
      - status
      type: object
    EntityReference:
      description: A reference to another entity.
      properties:
        id:
          format: int64
          type: integer
      required:
      - id
      type: object
    Error:
      description: An error.
      properties:
        msg:
          type: string
      required:
      - msg
      type: object
    Info:
      description: Information about an opera environment.
      properties:
        content_root:
          type: string
        inputs:
          type: object
        service_template:
          type: string
        status:
          type: string
      type: object
    Invocation:
      description: An invocation of the deployment.
      properties:
        exception:
          description: An internal xOpera error that occurred during the operation.
          type: string
        id:
          type: string
        inputs:
          description: Inputs provided for invocation.
          type: object
        instance_state:
          additionalProperties:
            type: string
          description: State of the instances defined in service template.
          type: object
        operation:
          $ref: '#/components/schemas/OperationType'
        service_template:
          description: The service template used for the invocation.
          type: string
        state:
          $ref: '#/components/schemas/InvocationState'
        stderr:
          description: xOpera error output for operation.
          type: string
        stdout:
          description: xOpera console output for operation.
          type: string
        timestamp:
          description: An ISO8601 timestamp of the invocation.
          type: string
      required:
      - id
      - state
      - operation
      - timestamp
      type: object
    InvocationHistory:
      description: Invocation history ordered by timestamp ascending.
      items:
        $ref: '#/components/schemas/Invocation'
      type: array
    InvocationState:
      enum:
      - pending
      - in_progress
      - success
      - failed
      type: string
    OperationSuccess:
      description: A general success message.
      properties:
        message:
          type: string
        success:
          type: boolean
      required:
      - success
      type: object
    OperationType:
      enum:
      - deploy
      - undeploy
      type: string
    PackagingFormat:
      enum:
      - zip
      - tar
      type: string
    PackagingInput:
      description: Packaging parameters.
      properties:
        format:
          $ref: '#/components/schemas/OperationType'
        output:
          type: string
        service_template:
          type: string
        service_template_folder:
          type: string
      required:
      - format
      - service_template_folder
      type: object
    PackagingResult:
      description: A general success message.
      properties:
        package_path:
          type: string
      required:
      - package_path
      type: object
    Project:
      description: A project.
      properties:
        csar:
          description: Base64-encoded ZIP file of the CSAR. The service template must
            be top-level.
          format: byte
          type: string
          writeOnly: true
        id:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        workspace:
          format: int64
          readOnly: true
          type: integer
      required:
      - id
      - name
      - workspace
      - csar
      type: object
    Secret:
      description: A secret.
      properties:
        contents:
          description: Base64-encoded contents.
          format: byte
          type: string
          writeOnly: true
        id:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        path:
          type: string
        sha512sum:
          description: The SHA3-512 checksum of the contents encoded as a hexadecimal
            string.
          readOnly: true
          type: string
        workspaces:
          format: int64
          items:
            type: integer
          readOnly: true
          type: array
      required:
      - id
      - name
      - path
      - contents
      - workspaces
      type: object
    UnpackagingInput:
      description: Unpackaging parameters.
      properties:
        csar:
          type: string
        destination:
          type: string
      required:
      - csar
      type: object
    UserIdentifier:
      description: A unique identifier for a user.
      type: string
    ValidationResult:
      description: A CSAR validation result.
      properties:
        message:
          type: string
        success:
          type: boolean
      required:
      - success
      type: object
    Workspace:
      description: A workspace.
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        isOwner:
          readOnly: true
          type: boolean
        name:
          type: string
        projects:
          format: int64
          items:
            type: integer
          readOnly: true
          type: array
        secrets:
          format: int64
          items:
            type: integer
          readOnly: true
          type: array
      required:
      - id
      - name
      - secrets
      - projects
      - isOwner
      type: object
    WorkspaceUserAuthorizationRequest:
      description: A request for user de-authorization.
      properties:
        user:
          $ref: '#/components/schemas/UserIdentifier'
      required:
      - user
      type: object
info:
  title: xOpera SaaS API
  version: 1.0.4
openapi: 3.0.0
paths:
  /auth/status:
    get:
      operationId: authStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationStatus'
          description: Authentication status.
      summary: Get the authentication status.
  /secret:
    get:
      operationId: getSecrets
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: A list of secrets.
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: List available secrets.
    post:
      operationId: createSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: Secret creation request.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: The created secret.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new secret.
  /secret/{secretId}:
    delete:
      operationId: deleteSecret
      responses:
        '200':
          description: Secret deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a secret.
    get:
      operationId: describeSecret
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: A secret.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Describe a secret.
    parameters:
    - in: path
      name: secretId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: updateSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: Secret update request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: The updated secret.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update a secret.
  /workspace:
    get:
      operationId: getWorkspaces
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workspace'
                type: array
          description: A list of workspaces.
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: List available workspaces.
    post:
      operationId: createWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        description: Workspace creation request.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: The created Workspace.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: Create a new workspace.
  /workspace/{workspaceId}:
    delete:
      operationId: deleteWorkspace
      responses:
        '200':
          description: Workspace deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a workspace.
    get:
      operationId: describeWorkspace
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: A workspace.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Describe a workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: updateWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        description: Workspace update request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: The updated workspace.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update a workspace.
  /workspace/{workspaceId}/authorizations:
    delete:
      operationId: deauthorizeWorkspaceUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUserAuthorizationRequest'
        description: Deauthorization request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: Success.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Deauthorize a user from the workspace.
    get:
      operationId: getWorkspaceAuthorizations
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserIdentifier'
                type: array
          description: A list of users authorized to this workspace.
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: List users authorized to this workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: authorizeWorkspaceUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUserAuthorizationRequest'
        description: Authorization request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: Success.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Authorize a new user to the workspace.
  /workspace/{workspaceId}/project:
    get:
      operationId: listWorkspaceProjects
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
          description: A list of projects.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: List projects in a workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    post:
      description: 'Secrets applied to the workspace the project is in are only applied
        on creation.

        To modify secrets, create a new project.

        '
      operationId: createWorkspaceProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: Project creation request.
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityReference'
          description: A reference to the created project.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Create a new project in the workspace (async).
  /workspace/{workspaceId}/project/{projectId}:
    delete:
      operationId: deleteWorkspaceProject
      responses:
        '200':
          description: Project deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete the project.
    get:
      operationId: describeWorkspaceProject
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: A project.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Describe the project.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: updateWorkspaceProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: Project update request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: The updated project.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update the project.
    x-extension-marker: true
  /workspace/{workspaceId}/project/{projectId}/creationStatus:
    get:
      operationId: describeWorkspaceProjectStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityCreationStatus'
          description: The project creation status.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Get the project creation status.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/debugPackage:
    get:
      operationId: createWorkspaceProjectDebugPackage
      responses:
        '200':
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: A debug archive.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Get a package for local debugging.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/deploy:
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: OperaApiDeploy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentInput'
        description: Deployment inputs and service template name.
        required: false
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invocation'
          description: The deployment was successfully initiated.
        '500':
          description: There was an error starting the deployment.
      summary: Deploy a CSAR
  /workspace/{workspaceId}/project/{projectId}/info:
    get:
      operationId: OperaApiInfo
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
          description: The opera environment operation.
        '500':
          description: General error.
      summary: Get information about the current opera environment
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/init:
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      deprecated: true
      operationId: OperaApiInit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsarInitializationInput'
        description: CSAR initialization parameters.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationSuccess'
          description: CSAR successfully initialized.
        '500':
          description: General error.
      summary: Initialize the CSAR for deployment. Deprecated in favour of unpacking
        and deploying the CSAR.
  /workspace/{workspaceId}/project/{projectId}/outputs:
    get:
      operationId: OperaApiOutputs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentOutput'
          description: The outputs of the deployment.
        '404':
          description: No outputs exist for this deployment.
      summary: Fetch deployment outputs
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/package:
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: OperaApiPackage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackagingInput'
        description: CSAR packaging parameters.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagingResult'
          description: Packaging successful.
        '500':
          description: General error.
      summary: Generate a CSAR from a working directory.
  /workspace/{workspaceId}/project/{projectId}/status:
    get:
      operationId: OperaApiStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvocationHistory'
          description: Asynchronous operation status history.
      summary: Fetch the status of a deployment
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/status/{invocationId}:
    get:
      operationId: OperaApiInvocationStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invocation'
          description: An invocation status.
        '404':
          description: No invocation with this id.
      summary: Fetch the status of a particular invocation.
    parameters:
    - in: path
      name: invocationId
      required: true
      schema:
        format: uuid
        type: string
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/project/{projectId}/undeploy:
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: OperaApiUndeploy
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invocation'
          description: The undeploy operation was successfully initiated.
        '500':
          description: There was an error starting the undeploy operation.
      summary: Undeploy a deployment
  /workspace/{workspaceId}/project/{projectId}/unpackage:
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: OperaApiUnpackage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnpackagingInput'
        description: CSAR unpackaging parameters.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationSuccess'
          description: Unpackaging successful.
        '500':
          description: General error.
      summary: Unpackage a CSAR.
  /workspace/{workspaceId}/project/{projectId}/validate:
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
    post:
      operationId: OperaApiValidate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentInput'
        description: Validation inputs and service template name.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
          description: The validation result.
        '500':
          description: There was an error starting validate operation.
      summary: Validate a CSAR
  /workspace/{workspaceId}/secret:
    get:
      operationId: listWorkspaceSecrets
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: A list of secrets.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: List secrets assigned to the workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
  /workspace/{workspaceId}/secret/{secretId}:
    delete:
      operationId: removeWorkspaceSecret
      responses:
        '200':
          description: Secret deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Remove the secret from the workspace.
    parameters:
    - in: path
      name: workspaceId
      required: true
      schema:
        format: int64
        type: integer
    - in: path
      name: secretId
      required: true
      schema:
        format: int64
        type: integer
    put:
      operationId: assignSecret
      responses:
        '200':
          description: Secret assigned to workspace.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Assign a new secret to the workspace.
